.define public PHI0_GPIO 21

; Prerequisites:
;  * Bus clock used is PHI0, wired to GPIO 21
;  * JMP pin is mapped to RW signal
;  * IN pins are mapped to USER1, PHI0, RW, and Data[7:0]
;  * input shift left and autopush @ 11 bits (although for address pushes
;    we actually push 19 bits, doing 8 and then 11 which gets us autopushed)
;  * run at about 250MHz (4ns/instruction)

; notes:
; Address and RW signals from 65c02 are valid 140ns after P1
; data write from 65c02 valid 75ns after P0
; data read to 65c02 must be valid min 50ns before P1 and min 10ns after
;   - 50ns before P1 is 448 after P0

; after PHI0 is detected as low or high, the cycle time is about 20ns after
;   the actual clock transition: about 12ns propagation delay through the
;   transceiver,  plus 2 cycles (4ns each) for the input synchronization 
;   done on PHI0.  Each subseqent cycle is labeled with the wall time at the
;   time that instruction starts.

; we are not maximally aggressive on timing, partly for ease of design, and
; partly because we have a mandate to give the eth core enough time to also
; sample the current bus lines before we select the next.
;   addr+control bits are pushed by P1+244
;   if a byte is to be written, it must be pushed to the fifo before P0+392
;   read+control bits are pushed by P0+468

.program abus_core


.wrap_target
main_loop_begin:

; Phase P1 (video)
    wait 0 GPIO, PHI0_GPIO [5] ; wait for PHI0 to fall (P1 begin)
; the extra wait is to give a little more hold time after P1 begin
; if we should happen to have just completed an emitted read cycle.
    set PINS, 0b1110 ; P1+40, disable all transceivers
    mov OSR, NULL ; P1+44
    out PINDIRS, 8 [26]; P1+48, set pins as input (they may have been output)
    set PINS, 0b0110 [7]; P1+152, enable addrhi transceiver
    in PINS, 8 [6]; P1+184 read addrhi (8 bits shifted in, NOT autopushed)
    set PINS, 0b1010 [6]; P1+212, enable addrlo transceiver
    pull noblock ; P1+240, clear out any possible TXFIFO cruft
    in PINS, 11 [6]; P1+244, read addrlo + control pins and autopush (19 bits)
    set PINS, 0b1110; P1+272, disable all transceivers

; Phase P0 (CPU)
    wait 1 GPIO, PHI0_GPIO [31] ; wait for PHI0 to rise (P0 begin)
    mov Y, Y [31] ; P0+144, NOP for delay
    jmp handle_read [29] ; P0+272 jump pin is RW, read high

; capture write
    mov Y, Y [11] ; P0+392, NOP for delay
    set PINS, 0b1100 [5] ; P0+440, enable data read transceiver
    jmp read_data ; P0+464

handle_read:
    mov X, STATUS ; P0+392, STATUS is whether TXFIFO is empty
    jmp !X emit_read ; P0+396, jump if there is data to pull
    
; capture read
    mov Y, Y [9] ; P0+400
    set PINS, 0b1100 [5]; P0+440, enable data read transceiver
    jmp read_data ; P0+464

emit_read:
    mov OSR, ~NULL ; P0+400
    out PINDIRS, 8 ; Po+404, set data pins as outputs
    pull noblock ; P0+408
    set PINS, 0b1101 ; P0+412, enable data write transceiver
    out PINS, 8 ; P0+416
; we continue on to read_data to do a dummy read and autopush, so that
; a push happens on every P0 even if not needed

read_data:
    in PINS, 11 ; P0+468, read data+control, autopush
.wrap